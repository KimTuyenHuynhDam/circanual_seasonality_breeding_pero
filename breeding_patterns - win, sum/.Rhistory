View(complete_data)
View(key)
pero_bw = read.xlsx("Peromyscus.xlsx") %>% filter(STOCK == "BW")
species = "BW"
pero <- read.xlsx("Peromyscus.xlsx", detectDates = TRUE) %>%
select(1:5) %>% distinct() %>%
clean_column_names() %>%
mutate(Birthday = as.Date(Birthday, origin = "1899-12-30"), # Excel's date origin
BirthMonth = month(Birthday),
BirthYear = year(Birthday))
species = "BW"
# Ensure species is processed consistently in lowercase
species_lower <- tolower(species)
# Process IND data
IND_ori <- pero %>%
filter(str_detect(tolower(STOCK), species_lower)) %>%
distinct() %>%
mutate(across(c(MatingNumber, ID), ~str_remove_all(., regex(species_lower, ignore_case = TRUE)) %>% str_replace_all("[^[:alnum:]]", ""))) %>%
mutate(
Sex = str_replace_all(Sex, "[^[:alnum:]]", "") %>% str_to_upper()
) %>%
mutate(
Sex = case_when(
Sex %in% c("F", "FEMALE", "FEM", "FEMALES") ~ "F",
Sex %in% c("M", "MALE", "MALES") ~ "M",
TRUE ~ Sex
)
)
View(IND_ori)
View(complete_data)
key_bm = key %>% left_join(IND_ori, by =c( "ExternalSampleName", "ID"))
key_bm = key %>% left_join(IND_ori, by =c( "ExternalSampleName" = "ID"))
# Convert columns to character type for safe joining
key <- key %>%
mutate(ExternalSampleName = as.character(ExternalSampleName))
IND_ori <- IND_ori %>%
mutate(ID = as.character(ID))
key_bm = key %>% left_join(IND_ori, by =c( "ExternalSampleName" = "ID"))
# Step 2: Merge with `key` to add metadata
beta_with_metadata <- beta_long %>%
inner_join(key, by = c("SID" = "SID")) %>% distinct()
# Ensure Sex is a factor and Age is numeric
complete_data <- beta_with_metadata %>%
mutate(
Sex = as.factor(Sex),
Age = as.numeric(Age)
)
print(complete_data )
colnames(complete_data )
# Step 2: Merge with `key_bm` to add metadata
beta_with_metadata <- beta_long %>%
inner_join(key_bm, by = c("SID" = "SID")) %>% distinct()
# Ensure Sex is a factor and Age is numeric
complete_data <- beta_with_metadata %>%
mutate(
Sex = as.factor(Sex),
Age = as.numeric(Age)
)
# Function to clean columns after merging multiple dataframes
clean_merged_columns <- function(df) {
base_names <- stringr::str_replace(names(df), "\\.(x|y)$", "")
unique_base_names <- unique(base_names)
cleaned_df <- data.frame(row.names = row.names(df))
for (base_name in unique_base_names) {
matching_cols <- grep(paste0("^", base_name, "\\.(x|y)?$"), names(df), value = TRUE)
if (base_name %in% names(df)) {
col_to_keep <- base_name
} else if (paste0(base_name, ".x") %in% names(df)) {
col_to_keep <- paste0(base_name, ".x")
} else {
col_to_keep <- paste0(base_name, ".y")
}
cleaned_df[[base_name]] <- df[[col_to_keep]]
}
return(cleaned_df)
}
# Step 2: Merge with `key_bm` to add metadata
beta_with_metadata <- beta_long %>%
inner_join(key_bm, by = c("SID" = "SID")) %>%
distinct() %>% clean_merged_columns()
# Ensure Sex is a factor and Age is numeric
complete_data <- beta_with_metadata %>%
mutate(
Sex = as.factor(Sex),
Age = as.numeric(Age)
)
# Convert birth month to radians for circular representation
key_bm$Month_radians <- as.circular((key_bm$BirthMonth - 1) * 2 * pi / 12)
# Next, create sine and cosine variables for birth month
key_bm$Month_sin <- sin(2 * pi * key_bm$BirthMonth / 12)
key_bm$Month_cos <- cos(2 * pi * key_bm$BirthMonth / 12)
# Step 2: Merge with `key_bm` to add metadata
beta_with_metadata <- beta_long %>%
inner_join(key_bm, by = c("SID" = "SID")) %>%
distinct() %>% clean_merged_columns()
# Ensure Sex is a factor and Age is numeric
complete_data <- beta_with_metadata %>%
mutate(
Sex = as.factor(Sex),
Age = as.numeric(Age)
)
##########scannning
# Nested modeling, ANOVA, and extracting direction
nested_anova <- complete_data %>%
group_by(CGid) %>%
nest() %>%
mutate(
# Fit reduced and full models
reduced_model = map(data, ~ lm(Beta ~ Sex + Age, data = .)),
full_model = map(data, ~ lm(Beta ~ Month_sin + Month_cos + Sex + Age, data = .)),
# Perform ANOVA to compare models
anova_result = map2(full_model, reduced_model, anova),
p_value = map_dbl(anova_result, ~ .x$`Pr(>F)`[2])
)
# Finalize results with FDR adjustment and annotation
nested_anova_final <- nested_anova %>%
select(CGid, p_value, estimate) %>% as.data.frame() %>%
mutate(FDR = p.adjust(p_value, method = "BH")) %>%
inner_join(map, by = "CGid")
# Finalize results with FDR adjustment and annotation
nested_anova_final <- nested_anova %>%
select(CGid, p_value) %>% as.data.frame() %>%
mutate(FDR = p.adjust(p_value, method = "BH")) %>%
inner_join(map, by = "CGid")
View(nested_anova_final)
write.xlsx('nested_anova_final, "CpGs regulated birth month - new BW DNAm dataset.xlsx')
write.xlsx(nested_anova_final, "CpGs regulated birth month - new BW DNAm dataset.xlsx")
top_cpg = myscan %>% filter(FDR < 0.1)
top_cpg = nested_anova_final %>% filter(FDR < 0.1)
nrow(top_cpg)
####### this one test the group by birth month of the first CpG, then calculate the average Promet of each month
group_by_birthmonth_test = top_cpg[[2]][[1]]  %>% group_by(BirthMonth)%>%
summarise(mean_ProMet=mean(ProMet),.groups = 'drop') %>%
as.data.frame()
####### this one test the group by birth month of the first CpG, then calculate the average Beta of each month
group_by_birthmonth_test = top_cpg[[2]][[1]]  %>% group_by(BirthMonth)%>%
summarise(mean_Beta=mean(Beta),.groups = 'drop') %>%
as.data.frame()
# Finalize results with FDR adjustment and annotation
nested_anova_final <- nested_anova %>%
select(CGid, p_value, BirthMonth, Sex, Age) %>% as.data.frame() %>%
mutate(FDR = p.adjust(p_value, method = "BH")) %>%
inner_join(map, by = "CGid")
##########scannning
# Nested modeling, ANOVA, and extracting direction
nested_anova <- complete_data %>%
group_by(CGid) %>%
nest() %>%
mutate(
# Fit reduced and full models
reduced_model = map(data, ~ lm(Beta ~ Sex + Age, data = .)),
full_model = map(data, ~ lm(Beta ~ Month_sin + Month_cos + Sex + Age, data = .)),
# Perform ANOVA to compare models
anova_result = map2(full_model, reduced_model, anova),
p_value = map_dbl(anova_result, ~ .x$`Pr(>F)`[2])
) %>% unnest(p_value)
View(nested_anova)
##########scannning
# Nested modeling, ANOVA, and extracting direction
nested_anova <- complete_data %>%
group_by(CGid) %>%
nest() %>%
mutate(
# Fit reduced and full models
reduced_model = map(data, ~ lm(Beta ~ Sex + Age, data = .)),
full_model = map(data, ~ lm(Beta ~ Month_sin + Month_cos + Sex + Age, data = .)),
# Perform ANOVA to compare models
anova_result = map2(full_model, reduced_model, anova),
p_value = map_dbl(anova_result, ~ .x$`Pr(>F)`[2])
)
# Finalize results with FDR adjustment and annotation
nested_anova_final <- nested_anova %>%
select(CGid, p_value) %>% as.data.frame() %>%
mutate(FDR = p.adjust(p_value, method = "BH")) %>%
inner_join(map, by = "CGid")
top_cpg = nested_anova_final %>% filter(FDR < 0.1)
View(top_cpg)
##########scannning
# Nested modeling, ANOVA, and extracting direction
nested_anova <- complete_data %>%
group_by(CGid) %>%
nest() %>%
mutate(
# Fit reduced and full models
reduced_model = map(data, ~ lm(Beta ~ Sex + Age + Relatedness, data = .)),
full_model = map(data, ~ lm(Beta ~ Month_sin + Month_cos + Sex + Age + Relatedness, data = .)),
# Perform ANOVA to compare models
anova_result = map2(full_model, reduced_model, anova),
p_value = map_dbl(anova_result, ~ .x$`Pr(>F)`[2])
)
# Finalize results with FDR adjustment and annotation
nested_anova_final <- nested_anova %>%
select(CGid, p_value) %>% as.data.frame() %>%
mutate(FDR = p.adjust(p_value, method = "BH")) %>%
inner_join(map, by = "CGid")
write.xlsx(nested_anova_final, "CpGs regulated birth month - new BW DNAm dataset-with relatedness as convariance.xlsx")
View(nested_anova_final)
source("C:/Users/huynhdam/OneDrive - University of South Carolina/Kiaris lab/peromyscus/data for MS seasonality 2024/circanual_2024/circanual/number of mice born in 1 year period (percentage of offspring by parent birthmonth).R")
setwd("C:/Users/huynhdam/OneDrive - University of South Carolina/Kiaris lab/peromyscus/data for MS seasonality 2024/circanual_2024/circanual")
source("C:/Users/huynhdam/OneDrive - University of South Carolina/Kiaris lab/peromyscus/data for MS seasonality 2024/circanual_2024/circanual/number of mice born in 1 year period (percentage of offspring by parent birthmonth).R")
source("C:/Users/huynhdam/OneDrive - University of South Carolina/Kiaris lab/peromyscus/data for MS seasonality 2024/circanual_2024/circanual/percentage of offspring by parent birthmonth.R")
source("C:/Users/huynhdam/OneDrive - University of South Carolina/Kiaris lab/peromyscus/data for MS seasonality 2024/circanual_2024/circanual/percentage of offspring by parent birthmonth.R")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/GitHub/circanual_pero/methylation - circanual/CpGs - sin, cos birthmonth- all tissues  (rescale ProMet to percentage over  birthmonth containing maximum ProMet.R")
setwd("~/GitHub/circanual_pero/methylation - circanual")
source("~/GitHub/circanual_pero/methylation - circanual/CpGs - sin, cos birthmonth- all tissues  (rescale ProMet to percentage over  birthmonth containing maximum ProMet.R")
source("~/GitHub/circanual_pero/methylation - circanual/CpGs - sin, cos birth month - poly (rescale ProMet to percentage over  birthmonth containing maximum ProMet.R")
source("~/GitHub/circanual_pero/methylation - circanual/CpGs - sin, cos birth month - poly (rescale ProMet to percentage over  birthmonth containing maximum ProMet.R")
rlang::last_trace()
source("~/GitHub/circanual_pero/methylation - circanual/CpGs - sin, cos birthmonth- all tissues  (rescale ProMet to percentage over  birthmonth containing maximum ProMet.R")
SS=read_xlsx("all_DNAm_mice_all_tissues.xlsx") %>% distinct() %>%
filter(CanBeUsedForAgingStudies == 'yes' & Tissue == "Tail")
source("~/GitHub/circanual_pero/methylation - circanual/CpGs - sin, cos birthmonth- all tails  (rescale ProMet to percentage over  birthmonth containing maximum ProMet).R")
SS=read_xlsx("all_DNAm_mice_all_tissues.xlsx") %>% distinct() %>%
filter(CanBeUsedForAgingStudies == 'yes' & Tissue == "Tail"  & Mongamous == "no")
SS=read_xlsx("all_DNAm_mice_all_tissues.xlsx") %>% distinct() %>%
filter(CanBeUsedForAgingStudies == 'yes' & Tissue == "Tail"  & Monogamous == "no")
source("~/GitHub/circanual_pero/methylation - circanual/CpGs - sin, cos birthmonth- poly  (rescale ProMet to percentage over  birthmonth containing maximum ProMet).R")
View(average_met)
#############graph all CpGs as lines, each CpG/line
######for all top CpGs
data_long <- melt(average_met, id.vars = "BirthMonth", variable.name  = "cg")
plot_all <- ggplot(data_long, aes(BirthMonth,value)) + geom_line(aes(colour = cg)) + theme_minimal() +
theme(legend.position = "none",
axis.text.x = element_text(size = 12, hjust = 1),   # Custom font size for x-axis ticks
axis.text.y = element_text(size = 12),                         # Custom font size for y-axis ticks
axis.title.x = element_text(size = 14, face = "bold"),# Bold x-axis label with larger font
axis.title.y = element_text(size = 14, face = "bold")
) +
scale_x_continuous(breaks=seq(1,12,1)) +
xlab('Birth Month') +ylab('Percentage of methylation level')
# View the plot in RStudio's Viewer Pane
print(plot_all)
nrow(top_cpg)
top_cpg = myscan %>% filter(p < 0.05 & fdr < 0.2)
nrow(top_cpg)
####### this one test the group by birth month of the first CpG, then calculate the average Promet of each month
group_by_birthmonth_test = top_cpg[[2]][[1]]  %>% group_by(BirthMonth)%>%
summarise(mean_ProMet=mean(ProMet),.groups = 'drop') %>%
as.data.frame()
#View(group_by_birthmonth_test)
############
###create empty value of each datatable with BirthMonth as first column
average_met = group_by_birthmonth_test[1]
high_september_met = group_by_birthmonth_test[1]
low_september_met = group_by_birthmonth_test[1]
middle_september_met = group_by_birthmonth_test[1]
for (i in 1: nrow(top_cpg)) {
each_cpg = top_cpg[[2]][[i]]
### this for loop goes through each CpG, group them by BirthMonth, then get average methylation level (ProMet) of each birthmonth
### next normalize value of each ProMet over the maximum ProMet (of any month)
group_by_birthmonth = each_cpg %>% group_by(BirthMonth) %>%
summarise(mean_ProMet=mean(ProMet),.groups = 'drop') %>%
as.data.frame() %>%
mutate(percentage = mean_ProMet/max(mean_ProMet) * 100)
#### assign the name of each specific CpG to each normalized percentage
colnames(group_by_birthmonth)[3] = top_cpg[[1]][[i]]
#### combine all  CpGs together, we wiill get the summarized table of top CpGs after normalizing to percentage
average_met = average_met %>% cbind(group_by_birthmonth[3])
####select CpGs having lowest methylation level in September
if (group_by_birthmonth[9,2] == min(group_by_birthmonth[2])) {
low_september_met = low_september_met %>% cbind(group_by_birthmonth[3])
}
else{
####select CpGs having lowest methylation level in September
if (group_by_birthmonth[9,2] == max(group_by_birthmonth[2]))
{high_september_met = high_september_met %>% cbind(group_by_birthmonth[3])}
####the remaing are CpGs having middle methylation level in September
else {middle_september_met = middle_september_met %>% cbind(group_by_birthmonth[3])}
}
}
# number of CpGs would be ncol(average_met) -1 (as 1 column for Birthmonth)
ncol(average_met)
ncol(high_september_met)
ncol(low_september_met)
ncol(middle_september_met)
#############graph all CpGs as lines, each CpG/line
######for all top CpGs
data_long <- melt(average_met, id.vars = "BirthMonth", variable.name  = "cg")
plot_all <- ggplot(data_long, aes(BirthMonth,value)) + geom_line(aes(colour = cg)) + theme_minimal() +
theme(legend.position = "none",
axis.text.x = element_text(size = 12, hjust = 1),   # Custom font size for x-axis ticks
axis.text.y = element_text(size = 12),                         # Custom font size for y-axis ticks
axis.title.x = element_text(size = 14, face = "bold"),# Bold x-axis label with larger font
axis.title.y = element_text(size = 14, face = "bold")
) +
scale_x_continuous(breaks=seq(1,12,1)) +
xlab('Birth Month') +ylab('Percentage of methylation level')
# View the plot in RStudio's Viewer Pane
print(plot_all)
# Save the plot with a full path specification
ggsave("./data/methylation level across birthmonth/poly - all.png", plot = plot_all, width = 10, height = 8, dpi = 300)
high_september_met_longdf <- melt(high_september_met, id.vars = "BirthMonth", variable.name  = "cg")
plot_high <- ggplot(high_september_met_longdf, aes(BirthMonth,value)) + geom_line(aes(colour = cg)) + theme_minimal() +
theme(legend.position = "none",
axis.text.x = element_text(size = 12, hjust = 1),   # Custom font size for x-axis ticks
axis.text.y = element_text(size = 12),                         # Custom font size for y-axis ticks
axis.title.x = element_text(size = 14, face = "bold"),# Bold x-axis label with larger font
axis.title.y = element_text(size = 14, face = "bold")
) +
scale_x_continuous(breaks=seq(1,12,1)) +
xlab('Birth Month') +ylab('Percentage of methylation level')
# View the plot in RStudio's Viewer Pane
print(plot_high)
ncol(high_september_met)
plot_high <- ggplot(high_september_met_longdf, aes(BirthMonth,value)) +
theme_minimal() +
theme(legend.position = "none",
axis.text.x = element_text(size = 12, hjust = 1),   # Custom font size for x-axis ticks
axis.text.y = element_text(size = 12),                         # Custom font size for y-axis ticks
axis.title.x = element_text(size = 14, face = "bold"),# Bold x-axis label with larger font
axis.title.y = element_text(size = 14, face = "bold")
) +
scale_x_continuous(breaks=seq(1,12,1)) +
xlab('Birth Month') +ylab('Percentage of methylation level')
# View the plot in RStudio's Viewer Pane
print(plot_high)
plot_high <- ggplot(high_september_met_longdf, aes(BirthMonth,value)) +
theme_minimal() +
theme(legend.position = "none",
axis.text.x = element_text(size = 12, hjust = 1),   # Custom font size for x-axis ticks
axis.text.y = element_text(size = 12),                         # Custom font size for y-axis ticks
axis.title.x = element_text(size = 14, face = "bold"),# Bold x-axis label with larger font
axis.title.y = element_text(size = 14, face = "bold")
) +
scale_x_continuous(breaks=seq(1,12,1)) +
xlab('Birth Month') +ylab('Percentage of methylation level')
# View the plot in RStudio's Viewer Pane
print(plot_high)
# Save the plot with a full path specification
ggsave("./data/methylation level across birthmonth/poly - high in Sep.png", plot = plot_high, width = 10, height = 8, dpi = 300)
source("~/GitHub/circanual_pero/database - circanual/percentage of offspring by parent birthmonth.R")
setwd("~/GitHub/circanual_pero/database - circanual")
source("~/GitHub/circanual_pero/database - circanual/percentage of offspring by parent birthmonth.R")
plot_high <- ggplot(high_september_met_longdf, aes(BirthMonth,value)) +
theme_minimal() +
theme(legend.position = "none",
axis.text.x = element_text(size = 12, hjust = 1),   # Custom font size for x-axis ticks
axis.text.y = element_text(size = 12),                         # Custom font size for y-axis ticks
axis.title.x = element_text(size = 14, face = "bold"),# Bold x-axis label with larger font
axis.title.y = element_text(size = 14, face = "bold")
) +
scale_x_continuous(breaks=seq(1,12,1)) +
xlab('Birth Month') +ylab('Percentage of methylation level')
# Save the plot with a full path specification
ggsave("./data/methylation level across birthmonth/poly - high in Sep.png", plot = plot_high, width = 10, height = 8, dpi = 300)
plot_high <- ggplot(high_september_met_longdf, aes(BirthMonth)) +
theme_minimal() +
theme(legend.position = "none",
axis.text.x = element_text(size = 12, hjust = 1),   # Custom font size for x-axis ticks
axis.text.y = element_text(size = 12),                         # Custom font size for y-axis ticks
axis.title.x = element_text(size = 14, face = "bold"),# Bold x-axis label with larger font
axis.title.y = element_text(size = 14, face = "bold")
) +
scale_x_continuous(breaks=seq(1,12,1)) +
xlab('Birth Month') +ylab('Percentage of methylation level')
# Save the plot with a full path specification
ggsave("./data/methylation level across birthmonth/poly - high in Sep.png", plot = plot_high, width = 10, height = 8, dpi = 300)
low_september_met_longdf <- melt(low_september_met, id.vars = "BirthMonth", variable.name  = "cg")
plot_low <- ggplot(low_september_met_longdf, aes(BirthMonth,value)) +
geom_line(aes(colour = cg)) + theme_minimal() +
theme(legend.position = "none",
axis.text.x = element_text(size = 12, hjust = 1),   # Custom font size for x-axis ticks
axis.text.y = element_text(size = 12),                         # Custom font size for y-axis ticks
axis.title.x = element_text(size = 14, face = "bold"),# Bold x-axis label with larger font
axis.title.y = element_text(size = 14, face = "bold")
) +
scale_x_continuous(breaks=seq(1,12,1)) +
xlab('Birth Month') +ylab('Percentage of methylation level')
# View the plot in RStudio's Viewer Pane
print(plot_low)
# Save the plot with a full path specification
ggsave("./data/methylation level across birthmonth/poly - low in Sep.png", plot = plot_low, width = 10, height = 8, dpi = 300)
#########################CpGs having middle signal in September
middle_september_met_longdf <- melt(middle_september_met, id.vars = "BirthMonth", variable.name  = "cg")
plot_middle <- ggplot(middle_september_met_longdf, aes(BirthMonth,value)) + geom_line(aes(colour = cg)) + theme_minimal() +
theme(legend.position = "none",
axis.text.x = element_text(size = 12, hjust = 1),   # Custom font size for x-axis ticks
axis.text.y = element_text(size = 12),                         # Custom font size for y-axis ticks
axis.title.x = element_text(size = 14, face = "bold"),# Bold x-axis label with larger font
axis.title.y = element_text(size = 14, face = "bold")
) +
scale_x_continuous(breaks=seq(1,12,1)) + xlab('Birth Month') +ylab('Percentage of methylation level')
# View the plot in RStudio's Viewer Pane
print(plot_middle)
# Save the plot with a full path specification
ggsave("./data/methylation level across birthmonth/poly - middle in Sep.png", plot = plot_middle, width = 10, height = 8, dpi = 300)
# Create a data frame with the number of columns in each specified data frame
summary_table <- data.frame(
Group = c("average_met", "high_september_met", "low_september_met", "middle_september_met"),
Count = c(ncol(average_met)-1, ncol(high_september_met)-1, ncol(low_september_met)-1, ncol(middle_september_met)-1)
)
# Write the summary table to a CSV file
write.xlsx(summary_table, "./data/methylation level across birthmonth/summary_table - poly.xlsx")
source("~/GitHub/circanual_pero/methylation - circanual/CpGs - sin, cos birthmonth- mono  (rescale ProMet to percentage over  birthmonth containing maximum ProMet).R")
setwd("~/GitHub/circanual_pero/methylation - circanual")
source("~/GitHub/circanual_pero/methylation - circanual/CpGs - sin, cos birthmonth- mono  (rescale ProMet to percentage over  birthmonth containing maximum ProMet).R")
source("~/GitHub/circanual_pero/methylation - circanual/CpGs - sin, cos birthmonth- mono  (rescale ProMet to percentage over  birthmonth containing maximum ProMet).R")
source("~/GitHub/circanual_pero/methylation - circanual/CpGs - sin, cos birthmonth- mono  (rescale ProMet to percentage over  birthmonth containing maximum ProMet).R")
#View(group_by_birthmonth_test)
############
###create empty value of each datatable with BirthMonth as first column
average_met = group_by_birthmonth_test[1]
high_september_met = group_by_birthmonth_test[1]
low_september_met = group_by_birthmonth_test[1]
middle_september_met = group_by_birthmonth_test[1]
for (i in 1: nrow(top_cpg)) {
each_cpg = top_cpg[[2]][[i]]
### this for loop goes through each CpG, group them by BirthMonth, then get average methylation level (ProMet) of each birthmonth
### next normalize value of each ProMet over the maximum ProMet (of any month)
group_by_birthmonth = each_cpg %>% group_by(BirthMonth) %>%
summarise(mean_ProMet=mean(ProMet),.groups = 'drop') %>%
as.data.frame() %>%
mutate(percentage = mean_ProMet/max(mean_ProMet) * 100)
#### assign the name of each specific CpG to each normalized percentage
colnames(group_by_birthmonth)[3] = top_cpg[[1]][[i]]
#### combine all  CpGs together, we wiill get the summarized table of top CpGs after normalizing to percentage
average_met = average_met %>% cbind(group_by_birthmonth[3])
####select CpGs having lowest methylation level in September
if (group_by_birthmonth[9,2] == min(group_by_birthmonth[2])) {
low_september_met = low_september_met %>% cbind(group_by_birthmonth[3])
}
else{
####select CpGs having lowest methylation level in September
if (group_by_birthmonth[9,2] == max(group_by_birthmonth[2]))
{high_september_met = high_september_met %>% cbind(group_by_birthmonth[3])}
####the remaing are CpGs having middle methylation level in September
else {middle_september_met = middle_september_met %>% cbind(group_by_birthmonth[3])}
}
}
# number of CpGs would be ncol(average_met) -1 (as 1 column for Birthmonth)
ncol(average_met)
ncol(high_september_met)
ncol(low_september_met)
ncol(middle_september_met)
source("~/GitHub/circanual_pero/methylation - circanual/CpGs - sin, cos birthmonth- mono  (rescale ProMet to percentage over  birthmonth containing maximum ProMet).R")
#top_cpg = myscan %>% filter(p < 0.05 & fdr < 0.1)
top_cpg = myscan %>% filter(p < 0.05 & fdr < 0.2)
nrow(top_cpg)
SS=read_xlsx("all_DNAm_mice_all_tissues.xlsx") %>% distinct() %>%
filter(CanBeUsedForAgingStudies == 'yes' & Tissue == "Tail"  & Monogamous == "no")
SS=read_xlsx("all_DNAm_mice_all_tissues.xlsx") %>% distinct() %>%
filter(CanBeUsedForAgingStudies == 'yes' & Tissue == "Tail" & Monogamous == "yes")
SS['SpeciesAbbreviation'][SS['SpeciesAbbreviation'] == "NA"] <- "Hybrid"
# Convert birth month to radians for circular representation
SS$Month_radians <- as.circular((SS$BirthMonth - 1) * 2 * pi / 12)
# Next, create sine and cosine variables for birth month
SS$Month_sin <- sin(2 * pi * SS$BirthMonth / 12)
SS$Month_cos <- cos(2 * pi * SS$BirthMonth / 12)
# merge the methylation results and mice info
nbs = normalized_betas_sesame %>%
pivot_longer(!CGid, names_to = "Basename", values_to = "ProMet") %>%
pivot_wider(names_from = CGid, values_from = ProMet) %>%
inner_join(SS) %>%
# there is NO universal naming scheme for "loci", but these three letters seem to cover it
pivot_longer(starts_with(c("cg","rs","ch")),names_to = "CGnum" , values_to = "ProMet")
##########scannning
myscan = nbs %>%
mutate(Sex = as.factor(Sex)) %>%
mutate(SpeciesAbbreviation = as.factor(SpeciesAbbreviation))  %>%
group_by(CGnum) %>%
nest() %>%
mutate(logp = map(data, ~ -log(anova(
lm(ProMet ~ Age + Sex + SpeciesAbbreviation, data = .),
lm(ProMet ~ Month_sin + Month_cos + Age + Sex  + SpeciesAbbreviation, data = .)
)[[6]][2])/log(10))) %>%
unnest(logp)
myscan$p = 10^-myscan$logp
myscan$fdr = p.adjust(myscan$p, method = 'fdr')
anno_BW = read.csv('Peromyscus_maniculatus_bairdii.hu_pman_2.1.100.HorvathMammalMethylChip40.v1.csv')
scan = myscan[, c(1,3,4,5)]
colnames(scan)[1] = 'CGid'
BW_scan = scan %>% left_join(anno_BW, by = 'CGid')
write.xlsx(BW_scan, './data/BWanno - CpGs - sin, cos - circannual birthmonth - mono.xlsx')
#top_cpg = myscan %>% filter(p < 0.05 & fdr < 0.1)
top_cpg = myscan %>% filter(p < 0.05 & fdr < 0.2)
nrow(top_cpg)
top_cpg = myscan %>% filter(p < 0.05 & fdr < 0.2)
nrow(top_cpg)
source("~/GitHub/circanual_pero/breeding_patterns/all F1 female or male mice born in winter, summer.R")
setwd("~/GitHub/circanual_pero/breeding_patterns")
source("~/GitHub/circanual_pero/breeding_patterns/all F1 female or male mice born in winter, summer.R")
source("~/GitHub/circanual_pero/breeding_patterns/all F1 mice born in winter, summer.R")
source("~/GitHub/circanual_pero/breeding_patterns/all F1 mice born in winter, summer.R")
source("~/GitHub/circanual_pero/breeding_patterns/all F1 female or male mice born in winter, summer.R")
source("~/GitHub/circanual_pero/breeding_patterns/Dam,Sire birth season - interval from birthday to first delivery time.R")
source("~/GitHub/circanual_pero/breeding_patterns/Dam,Sire birth season - litter size.R")
source("~/GitHub/circanual_pero/breeding_patterns/Dam,Sire birth season - litters.R")
source("~/GitHub/circanual_pero/breeding_patterns/Dam,Sire birth season - litters.R")
source("~/GitHub/circanual_pero/breeding_patterns/Dam,Sire birth season - litters.R")
source("~/GitHub/circanual_pero/breeding_patterns/Dam,Sire birth season - litters.R")
source("~/GitHub/circanual_pero/breeding_patterns/Dam,Sire birth season - litters.R")
source("~/GitHub/circanual_pero/breeding_patterns/Dam,Sire birth season - litters.R")
source("~/GitHub/circanual_pero/breeding_patterns/Dam,Sire birth season - litters (updated).R")
source("~/GitHub/circanual_pero/breeding_patterns/Dam,Sire birth season - litters (updated).R")
source("~/GitHub/circanual_pero/breeding_patterns/Dam,Sire birth season - litters (updated).R")
source("~/GitHub/circanual_pero/breeding_patterns/all F1 mice born in winter, summer.R")
source("~/GitHub/circanual_pero/breeding_patterns/all F1 mice born in winter, summer.R")
source("~/GitHub/circanual_pero/breeding_patterns/all F1 mice born in winter, summer.R")
source("~/GitHub/circanual_pero/breeding_patterns/all F1 mice born in winter, summer.R")
source("~/GitHub/circanual_pero/breeding_patterns/all F1 mice born in winter, summer.R")
source("~/GitHub/circanual_pero/breeding_patterns/all F1 mice born in winter, summer.R")
source("~/GitHub/circanual_pero/breeding_patterns/Dam,Sire birth season - litter size.R")
saveWorkbook(wb, file_name, overwrite = TRUE)
source("~/GitHub/circanual_pero/breeding_patterns/Dam,Sire birth season -F1 (updated).R")
source("~/GitHub/circanual_pero/breeding_patterns/Dam,Sire birth season -F1 (updated).R")
source("~/GitHub/circanual_pero/breeding_patterns/Dam,Sire birth season -F1 (updated).R")
source("~/GitHub/circanual_pero/breeding_patterns/Dam,Sire birth season -F1.R")
source("~/GitHub/circanual_pero/breeding_patterns/Dam,Sire birth season -F1 (updated).R")
source("~/GitHub/circanual_pero/breeding_patterns/total births, breeding pairs, offspring.R")
